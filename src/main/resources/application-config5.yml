# 数据分片配置 标准分片策略 - 行表达式 - 允许范围查询
spring:
  shardingsphere:
    rules:
      sharding:
        sharding-algorithms:
          # 自定义的分库算法
          custom-sharding-db:
            props:
              # 根据入参id取模  ds$->{id % 2}
              # 递增id如何保证数据和流量均衡可以参考
              # https://blog.csdn.net/tianmlin1/article/details/133199048
              algorithm-expression: $->{shardingKey % 2}
              # 允许范围查询，查询会无视分片策略，进行全路由 默认为false
              allow-range-query-with-inline-sharding: true
            #              algorithm-expression: ds0
            type: ENHANCE-INLINE # 自定义算法
          # 自定义的分表算法
          custom-sharding-table:
            props:
              # 根据入参id取模   分表算法
              allow-range-query-with-inline-sharding: true
              algorithm-expression: $->{(shardingKey >> 1) % 4}
            type: ENHANCE-INLINE
        tables:
          users:
            # 行表达式参考https://shardingsphere.apache.org/document/4.1.1/cn/features/sharding/other-features/inline-expression/
            # 数据节点配置
            actual-data-nodes: ds$->{0..1}.users_$->{0..3}
            database-strategy:
              standard:
                # 分片键
                sharding-column: id
                # 上面定义的分库算法
                sharding-algorithm-name: custom-sharding-db
            table-strategy:
              standard:
                # 分片键
                sharding-column: id
                # 上面定义的分表算法
                sharding-algorithm-name: custom-sharding-table
