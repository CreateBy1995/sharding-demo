# 数据分片配置  复杂分片策略&hint策略
spring:
  shardingsphere:
    rules:
      sharding:
        sharding-algorithms:
          # 自定义的分库算法
          custom-sharding-db:
            props:
              # 指定查询某个库 在执行查询前通过HintManager.getInstance().setDatabaseShardingValue指定
              algorithm-expression: $->{value}
            type: HINT_INLINE
          # 自定义的分表算法
          custom-sharding-table:
            props:
              sharding-columns: id,order_id
              # 根据入参id取模   分表算法
              allow-range-query-with-inline-sharding: true
              algorithm-expression: complex_user_$->{(id + order_id) % 2}
            type: COMPLEX_INLINE
        tables:
          complex_user:
#            actual-data-nodes: ds$->{0}.users_$->{2,4}
            # 行表达式参考https://shardingsphere.apache.org/document/4.1.1/cn/features/sharding/other-features/inline-expression/
            # 数据节点配置
            actual-data-nodes: ds$->{0..1}.complex_user_$->{0..1}
            database-strategy:
              hint:
                # 分片键
                sharding-column: id
                # 上面定义的分库算法
                sharding-algorithm-name: custom-sharding-db
            table-strategy:
              complex:
#              inline:
                # 分片键
                sharding-columns: id,order_id
                # 上面定义的分表算法
                sharding-algorithm-name: custom-sharding-table
