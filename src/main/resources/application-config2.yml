# 数据分片配置
spring:
  shardingsphere:
    props:
      # 展示实际执行的sql
      sql-show: true
      max-connections-size-per-query: 2
    datasource:
      # 定义数据源
      names: ds0,ds1
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://${mysqlUrl}:3306/sharding_0?useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai&autoReconnect=true&characterEncoding=utf8
        username: root
        password: sunshine
#        maximum-pool-size: 2
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://${mysqlUrl}:3306/sharding_1?useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai&autoReconnect=true&characterEncoding=utf8
        username: root
        password: sunshine
#        maximum-pool-size: 2
    rules:
      sharding:
        sharding-algorithms:
          # 自定义的分库算法
          custom-sharding-db:
            props:
              # 根据入参id取模  ds$->{id % 2}
              # 递增id如何保证数据和流量均衡可以参考
              # https://blog.csdn.net/tianmlin1/article/details/133199048
              algorithm-expression: ds$->{id % 2}
#              algorithm-expression: ds0
            type: INLINE
          # 自定义的分表算法
          custom-sharding-table:
            props:
              # 根据入参id取模   分表算法
              algorithm-expression: users_$->{(id >> 1) % 4}
            type: INLINE
        tables:
          users:
#            actual-data-nodes: ds$->{0}.users_$->{2,4}
            # 行表达式参考https://shardingsphere.apache.org/document/4.1.1/cn/features/sharding/other-features/inline-expression/
            # 数据节点配置
#            actual-data-nodes: ds0.users_${[0,1,2]},ds1.users_${[1,3]}
            actual-data-nodes: ds$->{0..1}.users_$->{0..3}
            database-strategy:
              standard:
#              inline:
                # 分片键
                sharding-column: id
                # 上面定义的分库算法
                sharding-algorithm-name: custom-sharding-db
            table-strategy:
              standard:
#              inline:
                # 分片键
                sharding-column: id
                # 上面定义的分表算法
                sharding-algorithm-name: custom-sharding-table
